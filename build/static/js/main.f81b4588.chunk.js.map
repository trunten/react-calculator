{"version":3,"sources":["App.js","components/button.js","serviceWorker.js","index.js"],"names":["App","props","reset","setState","current","previous","backspace","state","resetNext","length","substring","charAt","addToCurrent","symbol","isNaN","includes","push","calculateResult","expression","forEach","ex","replace","result","eval","isFinite","NaN","error","String","plusMinus","buttons","cols","action","this","className","join","type","value","readOnly","map","btn","i","key","Component","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f81b4588.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Button from './components/button';\nimport './css/style.css';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            current: '0',\n            previous: [],\n            resetNext: false\n        };\n\n    }\n\n    reset = () => {\n        this.setState({current: '0', previous: []});\n    }\n\n    backspace = () => {\n        let current = this.state.current;\n        if (current === 'NaN' || this.state.resetNext) { current = '0' }\n        if (current.length > 1) {\n            current = current.substring(0,current.length - (current.charAt(current.length-2) === '.'? 2 : 1))\n            \n        } else {\n            current = '0';\n        }\n        this.setState({current, resetNext: false});\n    }\n\n    addToCurrent = (symbol) => {\n        if (this.state.current === 'NaN') { \n            if (isNaN(symbol)) {\n                this.reset();\n            } else {\n                this.setState({current: symbol})\n            }\n        } else if (['+','-','x','÷'].includes(symbol)) {\n            this.state.previous.push(this.state.current + (this.state.current.charAt(this.state.current.length-1) === '.' ? '0' : '' ) + ' ' + symbol)\n            this.setState({current: '0', resetNext: false});\n        } else if ((this.state.current === '0' && symbol !== '.') || this.state.resetNext) {\n            if (symbol !== '.') {\n                this.setState({current: symbol, resetNext: false})\n            } else {\n                this.setState({current: '0.', resetNext: false});    \n            }\n        } else if (!this.state.current.includes('.') || symbol !=='.') {\n            this.setState({current: this.state.current + symbol});\n        }\n    }\n\n    \n\n    calculateResult = () => {\n        if (this.state.previous.length > 0) {\n            let expression = ''; \n            this.state.previous.forEach((ex) => {\n                expression += ex.replace('x','*').replace('÷','/');\n            })\n            expression = (expression + this.state.current).replace('--','+');\n            let result = 0;\n            try {\n                // eslint-disable-next-line\n                result = eval(expression);\n                if (!isFinite(result)) result = NaN;\n            } catch (error) {\n                result = NaN;\n            }\n            this.setState({current: String(result), previous: [], resetNext: true})\n        }\n    }\n\n    plusMinus = () => {\n        if (this.state.current !== 'NaN') {\n            // eslint-disable-next-line\n            this.setState({current: String(eval('-1*' + this.state.current))});\n        } else {\n            this.reset();\n        }\n    }\n\n    render() {\n        const buttons = [\n            {symbol: 'CE', cols: 2, action: this.reset},\n            {symbol: '⌫', cols: 1, action: this.backspace},\n            {symbol: '÷', cols: 1, action: this.addToCurrent},\n            {symbol: '7', cols: 1, action: this.addToCurrent},\n            {symbol: '8', cols: 1, action: this.addToCurrent},\n            {symbol: '9', cols: 1, action: this.addToCurrent},\n            {symbol: 'x', cols: 1, action: this.addToCurrent},\n            {symbol: '4', cols: 1, action: this.addToCurrent},\n            {symbol: '5', cols: 1, action: this.addToCurrent},\n            {symbol: '6', cols: 1, action: this.addToCurrent},\n            {symbol: '-', cols: 1, action: this.addToCurrent},\n            {symbol: '1', cols: 1, action: this.addToCurrent},\n            {symbol: '2', cols: 1, action: this.addToCurrent},\n            {symbol: '3', cols: 1, action: this.addToCurrent},\n            {symbol: '+', cols: 1, action: this.addToCurrent},\n            {symbol: '±', cols: 1, action: this.plusMinus},\n            {symbol: '0', cols: 1, action: this.addToCurrent},\n            {symbol: '.', cols: 1, action: this.addToCurrent},\n            {symbol: '=', cols: 1, action: this.calculateResult},\n        ];\n\n\n        return (\n            <div className='App'>\n                {this.state.previous.length > 0 ? \n                    //<div className='previous'>{this.state.previous[this.state.previous.length-1]}</div>\n                    <div className='previous'>{this.state.previous.join(' ')}</div>\n                : null}\n                <input className='result' type='text' value={this.state.current} readOnly />\n\n                {buttons.map((btn, i) => {\n                    return <Button key={i} symbol={btn.symbol} cols={btn.cols} action={(symbol) => btn.action(symbol)} />\n                })}\n            </div>\n        );\n    }\n}\n\nexport default App;","import React, {Component} from 'react';\n//import '../css/style.css';\n\nclass Button extends Component {\n    render() {\n        return (\n            <div className={'column-' + this.props.cols}>\n                <button \n                className={'calc-button' + (!isNaN(this.props.symbol) ? '' : ' operator')} \n                onClick={() => this.props.action(this.props.symbol)}>{this.props.symbol}</button>\n            </div>\n        )\n    }\n}\n\nexport default Button","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}